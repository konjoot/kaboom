// Code generated by protoc-gen-go. DO NOT EDIT.
// source: mock.proto

/*
Package mock is a generated protocol buffer package.

It is generated from these files:
	mock.proto

It has these top-level messages:
	BaseMsg
	EmptyMsg
*/
package mock

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type BaseMsg struct {
	ID      int64  `protobuf:"varint,1,opt,name=ID" json:"ID,omitempty"`
	UserID  string `protobuf:"bytes,2,opt,name=UserID" json:"UserID,omitempty"`
	ScopeID string `protobuf:"bytes,3,opt,name=ScopeID" json:"ScopeID,omitempty"`
}

func (m *BaseMsg) Reset()                    { *m = BaseMsg{} }
func (m *BaseMsg) String() string            { return proto.CompactTextString(m) }
func (*BaseMsg) ProtoMessage()               {}
func (*BaseMsg) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *BaseMsg) GetID() int64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *BaseMsg) GetUserID() string {
	if m != nil {
		return m.UserID
	}
	return ""
}

func (m *BaseMsg) GetScopeID() string {
	if m != nil {
		return m.ScopeID
	}
	return ""
}

type EmptyMsg struct {
}

func (m *EmptyMsg) Reset()                    { *m = EmptyMsg{} }
func (m *EmptyMsg) String() string            { return proto.CompactTextString(m) }
func (*EmptyMsg) ProtoMessage()               {}
func (*EmptyMsg) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func init() {
	proto.RegisterType((*BaseMsg)(nil), "mock.BaseMsg")
	proto.RegisterType((*EmptyMsg)(nil), "mock.EmptyMsg")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Mock service

type MockClient interface {
	Base(ctx context.Context, in *BaseMsg, opts ...grpc.CallOption) (*EmptyMsg, error)
}

type mockClient struct {
	cc *grpc.ClientConn
}

func NewMockClient(cc *grpc.ClientConn) MockClient {
	return &mockClient{cc}
}

func (c *mockClient) Base(ctx context.Context, in *BaseMsg, opts ...grpc.CallOption) (*EmptyMsg, error) {
	out := new(EmptyMsg)
	err := grpc.Invoke(ctx, "/mock.Mock/Base", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Mock service

type MockServer interface {
	Base(context.Context, *BaseMsg) (*EmptyMsg, error)
}

func RegisterMockServer(s *grpc.Server, srv MockServer) {
	s.RegisterService(&_Mock_serviceDesc, srv)
}

func _Mock_Base_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BaseMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MockServer).Base(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mock.Mock/Base",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MockServer).Base(ctx, req.(*BaseMsg))
	}
	return interceptor(ctx, in, info, handler)
}

var _Mock_serviceDesc = grpc.ServiceDesc{
	ServiceName: "mock.Mock",
	HandlerType: (*MockServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Base",
			Handler:    _Mock_Base_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mock.proto",
}

func init() { proto.RegisterFile("mock.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 149 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0xca, 0xcd, 0x4f, 0xce,
	0xd6, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x01, 0xb1, 0x95, 0xbc, 0xb9, 0xd8, 0x9d, 0x12,
	0x8b, 0x53, 0x7d, 0x8b, 0xd3, 0x85, 0xf8, 0xb8, 0x98, 0x3c, 0x5d, 0x24, 0x18, 0x15, 0x18, 0x35,
	0x98, 0x83, 0x98, 0x3c, 0x5d, 0x84, 0xc4, 0xb8, 0xd8, 0x42, 0x8b, 0x53, 0x8b, 0x3c, 0x5d, 0x24,
	0x98, 0x14, 0x18, 0x35, 0x38, 0x83, 0xa0, 0x3c, 0x21, 0x09, 0x2e, 0xf6, 0xe0, 0xe4, 0xfc, 0x82,
	0x54, 0x4f, 0x17, 0x09, 0x66, 0xb0, 0x04, 0x8c, 0xab, 0xc4, 0xc5, 0xc5, 0xe1, 0x9a, 0x5b, 0x50,
	0x52, 0xe9, 0x5b, 0x9c, 0x6e, 0xa4, 0xcf, 0xc5, 0xe2, 0x9b, 0x9f, 0x9c, 0x2d, 0xa4, 0xce, 0xc5,
	0x02, 0xb2, 0x40, 0x88, 0x57, 0x0f, 0x6c, 0x37, 0xd4, 0x32, 0x29, 0x3e, 0x08, 0x17, 0xa6, 0x5c,
	0x89, 0x21, 0x89, 0x0d, 0xec, 0x2c, 0x63, 0x40, 0x00, 0x00, 0x00, 0xff, 0xff, 0x4d, 0x0a, 0x96,
	0xd7, 0xa4, 0x00, 0x00, 0x00,
}
